import pympi
import cv2
import os
from pathlib import Path

#Function to extract videos for each gloss in the ELAR Data videoset
def create_word_segment_video(input_file, word_times, ouput_location, video_name):

    #Initialising a video capture object
    cap = cv2.VideoCapture(input_file)

    #getting video properties
    fps = cap.get(cv2.CAP_PROP_FPS)
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    #Extract frames and write to ouput file
    frames = {}
    print ("Video:Start Frame")

    while cap.isOpened():
        ret, frame = cap.read()
        #If the frame isn't read correctly then breaks
        if not ret:
            break
        frame_num = int(cap.get(cv2.CAP_PROP_POS_FRAMES))
        frames[frame_num] = frame

    print ("Video: End frames")
    cap.release()

    i = 0 
    print("Start: Creating segments")
    
    for start, end, word in word_times:

        output_file = ouput_location + word + '_' + str(int(start)) + str(int(end)) + '.mp4'

        #Calculate start and end frame
        start_frame = int(start * fps * 0.001)
        end_frame = int(end * fps * 0.001)

        #Set video writer
        fourcc = cv2.VideoWriter_fourcc('m','p','4','v')
        output =  cv2.VideoWriter(output_file, fourcc, fps, (width, height))
        for frame_num in range(start_frame,end_frame):
            try:
                frame = frames[frame_num]
            except KeyError as error:
                continue
            output.write(frame)
        output.release()
        i += 1

    print("Finished: Creating segments")

#TEST - Creating segments for one video file

"""videoName = "AAM1A1c2a"
videoLocation = "/Users/emilianeve/Documents/Uni - Sem 1 2023/METR4911/ELAR Data/AAM1A1c2a - The Boy Who Cried Wolf"
targetVideo = videoLocation + '/' + videoName + '.mp4'
outputLocation = '/Users/emilianeve/Documents/Uni - Sem 1 2023/METR4911/ELAR-video-segments'

eafFile = videoLocation + '/' + videoName + '.eaf'
eaf = pympi.Eaf(eafFile)

j = 0
wordTimes = []

for key in list(eaf.tiers['RH-IDgloss'][0].keys()):

    start = eaf.timeslots[eaf.tiers['RH-IDgloss'][0][key][0]]
    end = eaf.timeslots[eaf.tiers['RH-IDgloss'][0][key][1]]
    word = eaf.tiers['RH-IDgloss'][0][key][2]
    wordTimes.append((start,end,word))

print ('All word times have been found')

extract_word_segment_video(targetVideo, wordTimes, outputLocation + '/' , videoName) """

### FOR ALL VIDEO FILES



outputLocation = '/Users/emilianeve/Documents/Uni - Sem 1 2023/METR4911/ELAR-video-segments/'

folderLocation = "/Users/emilianeve/Documents/Uni - Sem 1 2023/METR4911/ELAR Data/"
folderList = os.listdir(folderLocation)
i = 0 
for folder in folderList:
    #Ignoring irrelevant folders/files
    if folder == "!Annotated Files":
        continue
    if folder == ".DS_Store":
        continue
    if folder == "Readme.md":
        continue

    #Getting  the ELAR Video File
    videoLocation = folderLocation + folder
    videoName = folder.split()[0]
    print(videoName)
    targetVideo = videoLocation + '/' + videoName + '.mp4'

    #Getting the associated ELAR annotation EAF file
    eafFile = videoLocation + '/' + videoName + '.eaf'

    #Turning the file into and EAF object for use with the pympi library
    try:
        eaf = pympi.Eaf(eafFile)
    except FileNotFoundError as error:
        print("Error")

    #Creating a folder based on the video name
    path = os.path.join(outputLocation, videoName)
    try:
        os.mkdir(path)
    except OSError as error:
        print("Error") 

    #Setting the save location for the video segment
    saveLocation = outputLocation + videoName
    print(saveLocation)
    annotationData = []

    # Finding the start time, end time and gloss for each gloss in the ELAR video
    for key in list(eaf.tiers['RH-IDgloss'][0].keys()):
        start = eaf.timeslots[eaf.tiers['RH-IDgloss'][0][key][0]]
        end = eaf.timeslots[eaf.tiers['RH-IDgloss'][0][key][1]]
        word = eaf.tiers['RH-IDgloss'][0][key][2]
        annotationData.append((start,end,word))

    print ('All annotation data has been found')

    #Creates video segments 
    create_word_segment_video(targetVideo, annotationData, saveLocation + '/' , videoName)

